/scratch/users/sahn1/WE_Triazine
/scratch/users/sahn1/WE_Triazine/StarterFolderGROMACS_WE

0
0
1
0
1
2

100000
10.0
10
23
-180.0
180.0

0
200
1
0
0

1
0
20.0 20.0 20.0
20 21 22

### the above lines are input for the following weighted ensemble simulation parameters ###
main_directory
initial_configuration_directory

simulation_flag  # 0: new simulation. 1: restarting simulation from middle of simulation. 2: restarting simulation from
                   middle of binning. 3: restarting simulation from middle of resampling.
balls_flag  # 0: create new balls at each step. 1: keep created balls.
sorting_flag  # 0: sort walkers' weights in descending order (most probable walkers first). 1: sort walkers' weights in
                ascending order (rare walkers first).
rate_flag  # 0: off. 1: on. rates/fluxes between pre-defined states  will be calculated. the walker's state is
             determined by we_check_state_function.py.
num_states  # number of pre-defined states for rate/flux calculation. only needed if rate_flag = 1, otherwise 1.
enhanced_sampling_flag  # 0: off. 1: sub-binning balls by standard deviation distance from center of ball. 2: binning
                          walkers if the walkers have some property less or greater than threshold. 3: spectral
                          clustering.

num_balls_limit  # limit is set depending on the available memory. parameter needed in case the calculated max_num_balls
                   is greater or too much smaller than the limit.
radius  # radius can be changed in the middle of the simulation.
num_walkers  # num_walkers should be fixed.
num_cvs  # number of collective variables (num_cvs) should be fixed.
lower_bound  # lower bound value for the collective variables. set it to arbitrary value if collective variables have
               different units. this is only used to calculate the volume of the free energy landscape.
upper_bound  # upper bound value for the collective variables.

initial_step_num  # initial_step_num should be changed from 0 when restarting a simulation.
max_num_steps  # maximum number of steps for the simulation.
num_occupied_balls  # num_occupied_balls should be changed when restarting a simulation. NOTE: when simulation_flag = 3,
                      this should be equal to the highest walker number inside the WE folder.
first_walker  # only needed if simulation_flag = 1, otherwise put 0.
last_walker  # only needed if simulation_flag = 1, otherwise put 0.

### for the next four lines, if enhanced_sampling_flag = 2 ###
less_or_greater_flag  # 0: criteria for binning walkers is if the walkers have some property LESS than the threshold.
                        1: criteria for binning walkers is if the walkers have some property GREATER than the threshold.
static_threshold_flag  # 0: off, then the lowest (less_or_greater_flag = 0) or highest (less_or_greater_flag = 1)
                         current value is set as the threshold for the next step. 1: on, initial threshold is kept
                         throughout the simulation.
threshold_values  # if some properties of the walker have values less or greater than the threshold values, then it is
                    binned to the nearest existing ball.
properties_to_keep_track  # properties of the walker that are compared against the threshold values. this can be weight
                            and/or some collective variable(s). if one of them is weight, then type -1. otherwise type
                            the indices of the collective variable, e.g. if there are 3 collective variables and you
                            would like to keep track of the last one, type 2
                            (index starts from 0). if more than one property is kept track of, then type them
                            sequentially separated by a space, e.g. -1 2.

see above as an example.

### for the next four lines, if enhanced_sampling flag == 3 ###
num_balls_for_sc  # minimum number of balls present to perform spectral clustering for that step
num_clusters  # number of clusters for k-means part of spectral clustering
num_walkers_for_sc  # number of walkers for each macro-state, usually set equal to the avg number of walkers per
                      macro-state, which is (num_balls_for_sc/num_clusters)*num_walkers
timestep  # length of timestep in ps

as an example,
1000
10
10000
10.0
